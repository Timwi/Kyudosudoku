using System;
using System.Collections.Generic;
using System.Linq;
using PuzzleSolvers;
using RT.Util.ExtensionMethods;

namespace KyudosudokuWebsite
{
    sealed class AntiKnight : KyuCellConstraint
    {
        public override string Name => "Anti-knight";
        public override string Description => "The same digit can’t be a knight’s move in chess away from this digit.";
        public static readonly Example Example = new Example
        {
            Constraints = { new AntiKnight(19) },
            Cells = { 12, 19 },
            Good = { 7, 2 },
            Bad = { 2, 2 }
        };

        public AntiKnight(int cell) : base(cell) { }
        private AntiKnight() { }    // for Classify

        protected override Constraint getConstraint() => new AntiKnightConstraint(9, 9, enforcedCells: new[] { Cell });
        public override string Svg => $@"<path fill='rgba(0, 0, 0, .2)' d='{PathD}' transform='translate({Cell % 9}, {Cell / 9}) scale(.01)' />";
        private static readonly string PathD = @"M 94.583332,94.635414 H 30.15625 q 0,-9.739583 2.447917,-14.947916 2.447917,-5.208334 8.645833,-8.802084 7.864583,-4.531249 7.864583,-11.458333 0,-1.5625 -1.041666,-3.177083 -2.760417,2.239583 -14.739583,5.104167 -4.166667,1.197916 -5.104167,8.020833 -0.520833,3.229166 -2.135416,5.052083 -1.5625,1.770833 -3.75,1.770833 -5.625,0 -11.302083,-4.53125 -5.6250003,-4.583333 -5.6250003,-10.208333 0,-4.375 6.0416663,-12.447916 4.375,-5.885417 5.572917,-8.229167 1.197916,-2.343749 1.614583,-5.781249 0.416667,-3.75 0.885417,-5.260417 0.520833,-1.5625 2.291666,-4.21875 2.34375,-3.4375 2.916667,-5.885416 0.625,-2.447917 0.625,-6.666667 V 6.4583326 q 4.895833,2.1354166 9.479166,9.9999994 l 2.760417,-0.104166 q 1.979167,-3.489584 2.96875,-10.9895834 3.645833,1.6666667 6.666666,6.3541664 3.020834,4.635417 4.21875,6.458333 22.395833,2.864584 32.760416,16.5625 10.364583,13.645833 10.364583,46.458332 z m -5.364583,-2.96875 v -8.333333 q 0,-33.124999 -9.114583,-46.354166 -9.114583,-13.281249 -29.895833,-15.833333 -1.197916,-0.885416 -3.28125,-4.583333 -2.760416,-4.84375 -4.531249,-5.989583 -1.197917,6.197916 -1.354167,7.447916 -0.15625,1.197917 -1.25,3.333334 Q 38.75,23.489582 37.5,23.489582 q -1.041666,0 -1.041666,-1.5625 0,-0.885416 0.416666,-2.135416 l -6.822916,3.28125 -0.208334,-1.145834 q 1.145834,-1.71875 2.447917,-2.239583 0,-3.59375 -3.958333,-7.291667 0,5.833334 -0.677083,8.333334 -0.625,2.447916 -3.28125,6.510416 -1.614584,2.552083 -2.03125,3.802083 -0.416667,1.25 -0.729167,4.739584 -0.208333,2.552083 -1.354167,4.999999 -1.09375,2.395834 -6.354166,9.947917 -3.385417,4.84375 -4.4791667,6.822916 -1.0416666,1.927084 -1.0416666,3.697917 0,3.645833 2.5520833,6.302083 2.552083,2.65625 4.0625,2.65625 0.78125,0 2.083333,-2.552083 2.34375,-4.6875 3.802083,-4.6875 1.770834,0 1.770834,1.927083 0,1.510417 -1.458334,3.489583 -1.458333,1.71875 -2.447916,3.75 1.458333,1.09375 3.385416,1.09375 2.34375,0 3.125,-4.270833 1.354167,-8.645833 6.510417,-10.15625 3.854166,-0.9375 7.916666,-2.135416 4.114583,-1.197917 6.145833,-2.34375 2.083334,-1.197917 3.177084,-2.5 1.145833,-1.302083 3.125,-5.260417 0.416666,0.3125 0.833333,0.729167 -1.041667,3.177083 -1.041667,5.677083 l 0.208334,6.5625 q 0,8.697916 -9.0625,13.697916 -4.895833,2.65625 -7.1875,6.927084 -2.239583,4.270833 -2.239583,11.510416 z M 35.677084,34.270832 q -1.979167,0.46875 -3.28125,1.510417 0.208333,1.666666 0.208333,2.03125 0,0.729166 -1.822917,1.666666 l -2.239583,-0.3125 -0.416666,0.677083 v 2.239584 q -2.447917,-1.927084 -2.447917,-3.229167 0,-1.822916 2.708333,-3.645833 2.760417,-1.875 4.53125,-1.875 h 2.34375 z M 15.416668,58.072915 q -0.416667,1.40625 -1.614584,2.34375 l 1.510417,1.822916 q 0,0.885417 -0.625,1.458334 -0.625,0.572916 -1.40625,0.572916 -1.614583,0 -1.614583,-2.5 0,-1.5625 1.041666,-2.604166 1.09375,-1.09375 2.708334,-1.09375 z";

        public override bool Verify(int[] grid)
        {
            foreach (var c in AntiKnightConstraint.KnightsMoves(Cell, 9, 9, false))
                if (grid[c] == grid[Cell])
                    return false;
            return true;
        }

        public static IList<KyuConstraint> Generate(int[] sudoku) => Enumerable.Range(0, 81)
            .Where(cell => AntiKnightConstraint.KnightsMoves(cell, 9, 9, false).All(c => sudoku[c] != sudoku[cell]))
            .Select(cell => new AntiKnight(cell))
            .ToArray();
    }
}
